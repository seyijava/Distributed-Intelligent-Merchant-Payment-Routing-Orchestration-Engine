akka {
  loglevel = info
  actor {
    provider = cluster
  }
  remote {
    log-remote-lifecycle-events = on
    artery.canonical {
      hostname = ${clustering.ip}
      port = ${clustering.port}
    }
  }
  cluster {
    seed-nodes = [
       "akka://"${paymentServiceProvider.clusterName}"@"${clustering.seed-ip}":"${clustering.seed-port}
    ]
  }
}

paymentServiceProvider {
  numberOfInstance = 10
  numberOfInstance = ${?NO_OF_WORKERS}
  name = "PAYPAL"
  name = ${?SERVICE_PROVIDER_NAME}
  clusterName = "PAYPALCluster"
  clusterName = ${?CLUSTER_NAME}
  config{
    serviceUrl = ""
    serviceUrl = ${?PSP_CONFIG_SERVICEURL}
    userName = ""
    userName = ${?PSP_CONFIG_USERNAME}
    password = ""
    password = ${?PSP_CONFIG_PASSWORD}
    merchantAccount = ""
    merchantAccount = ${?PSP_CONFIG_MERCHANTACCOUNT}
    merchantId = "Test"
    merchantId = ${?PSP_CONFIG_MERCHANTID}
    publicKey = "TeskPublicKey"
    publicKey = ${?PSP_CONFIG_PUBLICKEY}
    privateKey = "TeskPublicKey"
    privateKey = ${?PSP_CONFIG_PRIVATEKEY}
  }

}


kafka{
 brokerUrl = "192.168.56.1:9092"
 brokerUrl = ${?KAFKA_BROKER_URL}
 topic = "StripeChannelTopic"
 topic = ${?kAFKA_OUTBOUNDPAYMENT_TOPIC}
 groupId = "StripeGrp"
 groupId = ${?kAFKA_TOPIC_GROUPID}
 groupInstanceId = "StripeGrp_1"
 groupInstanceId =  ${?kAFKA_GROUP_INSTANCEID}
}

akka.kafka.consumer {
  # Tuning property of scheduled polls.
  poll-interval = 50ms

  # Tuning property of the `KafkaConsumer.poll` parameter.
  # Note that non-zero value means that blocking of the thread that
  # is executing the stage will be blocked.
  poll-timeout = 50ms

  # The stage will be await outstanding offset commit requests before
  # shutting down, but if that takes longer than this timeout it will
  # stop forcefully.
  stop-timeout = 30s

  # How long to wait for `KafkaConsumer.close`
  close-timeout = 20s

  # If offset commit requests are not completed within this timeout
  # the returned Future is completed `TimeoutException`.
  commit-timeout = 15s

  # If the KafkaConsumer can't connect to the broker the poll will be
  # aborted after this timeout. The KafkaConsumerActor will throw
  # org.apache.kafka.common.errors.WakeupException, which can be handled
  # with Actor supervision strategy.
  wakeup-timeout = 10s

  # Fully qualified config path which holds the dispatcher configuration
  # to be used by the KafkaConsumerActor. Some blocking may occur.
  use-dispatcher = "akka.kafka.default-dispatcher"

  # Properties defined by org.apache.kafka.clients.consumer.ConsumerConfig
  # can be defined in this configuration section.
  kafka-clients {
    # Disable auto-commit by default
    enable.auto.commit = false
     bootstrap.servers = "192.168.56.1:9092"

  }
}



clustering {
 ip = "127.0.0.1"
 ip = ${?CLUSTER_IP}
 port = 1600
 port = ${?CLUSTER_PORT}
 seed-ip = "127.0.0.1"
 seed-ip = ${?CLUSTER_IP}
 seed-ip = ${?SEED_IP}
 seed-port = 1600
 seed-port = ${?SEED_PORT}
 cluster.name = clustering-cluster
}
